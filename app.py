import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import networkx as nx
from pyvis.network import Network
import tempfile
import streamlit.components.v1 as components
import json
from Markov import SimpleMarkovChain

# Modification de la classe SimpleMarkovChain pour supporter le nombre de phrases
# Note: Cette modification assume que la classe peut √™tre √©tendue ou existe d√©j√† avec cette m√©thode
class EnhancedMarkovChain(SimpleMarkovChain):
    def generate_text(self, length=20, start_state=None, num_sentences=1):
        """
        G√©n√®re du texte en sp√©cifiant le nombre de phrases √† g√©n√©rer
        
        Args:
            length: Nombre maximum de mots
            start_state: √âtat initial (mot)
            num_sentences: Nombre de phrases √† g√©n√©rer
        
        Returns:
            Texte g√©n√©r√©
        """
        # Si un seul nombre de phrases est demand√©, utiliser la m√©thode standard
        if num_sentences <= 1:
            return super().generate_text(length, start_state)
            
        # Pour plusieurs phrases, toutes avec le m√™me mot de d√©part si sp√©cifi√©
        sentences = []
        for _ in range(num_sentences):
            # Utiliser le m√™me √©tat initial pour chaque phrase si sp√©cifi√©
            new_sentence = super().generate_text(length, start_state)
            sentences.append(new_sentence)
            
        # Joindre les phrases avec un saut de ligne entre chaque
        return "\n".join(sentences)

# Configuration de la page
st.set_page_config(
    page_title="G√©n√©rateur par Cha√Æne de Markov",
    page_icon="üìù",
    layout="wide"
)

# Titre et description concise
st.title("G√©n√©rateur de texte par cha√Ænes de Markov")
st.markdown("""
Application permettant de cr√©er, visualiser et utiliser des cha√Ænes de Markov pour la g√©n√©ration de texte.
""")

# Initialiser le mod√®le et les variables de session
if 'markov_chain' not in st.session_state:
    st.session_state.markov_chain = EnhancedMarkovChain()

if 'transitions' not in st.session_state:
    st.session_state.transitions = {}

if 'input_text' not in st.session_state:
    st.session_state.input_text = "Le chat noir dort. Le chat blanc joue. Le chien dort aussi."

# Cr√©er les onglets avec noms concis
tab1, tab2, tab3, tab4 = st.tabs(["Donn√©es d'entr√©e", "Configuration", "Visualisation", "G√©n√©ration"])

# Onglet 1: Texte d'entr√©e
with tab1:
    st.header("Donn√©es d'entr√©e")
    
    input_text = st.text_area(
        "Texte d'entra√Ænement",
        value=st.session_state.input_text,
        height=200
    )
    
    st.session_state.input_text = input_text
    
    if st.button("Construire le mod√®le"):
        transitions = SimpleMarkovChain.build_transitions_from_text(input_text)
        st.session_state.transitions = transitions
        st.success(f"Mod√®le cr√©√© avec {len(transitions)} √©tats")
        
        with st.expander("Aper√ßu du mod√®le"):
            st.json(transitions)

# Onglet 2: Dictionnaire de transitions
with tab2:
    st.header("Configuration du mod√®le")
    
    st.caption("""
    Chaque ligne repr√©sente un √©tat et ses transitions possibles.
    Format: `√©tat -> √©tat_suivant:probabilit√©, √©tat_suivant:probabilit√©, ...`
    """)
    
    # Convertir le dictionnaire en texte pour l'√©dition
    transitions_text = ""
    for state, next_states in st.session_state.transitions.items():
        transitions_line = f"{state} -> "
        transitions_items = [f"{next_state}:{prob:.2f}" for next_state, prob in next_states.items()]
        transitions_line += ", ".join(transitions_items)
        transitions_text += transitions_line + "\n"
    
    edited_transitions = st.text_area(
        "Matrice de transition",
        value=transitions_text,
        height=300
    )
    
    if st.button("Appliquer les modifications"):
        # Parser le texte en dictionnaire
        transitions = {}
        lines = edited_transitions.strip().split("\n")
        
        for line in lines:
            if "->" in line:
                state, transitions_str = line.split("->")
                state = state.strip()
                transitions[state] = {}
                
                if transitions_str.strip():
                    transitions_items = transitions_str.split(",")
                    for item in transitions_items:
                        if ":" in item:
                            next_state, prob_str = item.split(":")
                            next_state = next_state.strip()
                            try:
                                prob = float(prob_str.strip())
                                transitions[state][next_state] = prob
                            except ValueError:
                                st.error(f"Erreur de format: {prob_str}")
        
        # V√©rifier que les probabilit√©s somment √† 1 pour chaque √©tat
        valid = True
        for state, next_states in transitions.items():
            total_prob = sum(next_states.values())
            if abs(total_prob - 1.0) > 0.01:  # Tol√©rance pour les erreurs d'arrondi
                st.warning(f"√âtat '{state}': somme des probabilit√©s = {total_prob:.2f} (‚â† 1.0)")
                valid = False
        
        if valid:
            st.session_state.transitions = transitions
            markov_chain = EnhancedMarkovChain()
            markov_chain.set_transitions(transitions)
            st.session_state.markov_chain = markov_chain
            st.success("Mod√®le mis √† jour")
        else:
            st.error("Veuillez corriger les erreurs dans la matrice de transition")

# Onglet 3: Visualisation
with tab3:
    st.header("Visualisation du mod√®le")
    
    if st.session_state.transitions:
        # Mettre √† jour le mod√®le si n√©cessaire
        if not hasattr(st.session_state.markov_chain, 'transitions') or st.session_state.markov_chain.transitions != st.session_state.transitions:
            markov_chain = EnhancedMarkovChain()
            markov_chain.set_transitions(st.session_state.transitions)
            st.session_state.markov_chain = markov_chain
        
        # Cr√©er les sous-onglets de visualisation
        vis_tab1, vis_tab2 = st.tabs(["Graphe", "Matrice"])
        
        # Sous-onglet 1: Graphe des transitions
        with vis_tab1:
            st.subheader("Graphe des transitions")
            
            col1, col2 = st.columns(2)
            
            with col1:
                vis_type = st.radio(
                    "Mode d'affichage",
                    ["Statique", "Interactif"]
                )
            
            with col2:
                # Ne pas limiter le nombre de n≈ìuds par d√©faut
                display_all_nodes = st.checkbox("Afficher tous les n≈ìuds", value=True)
                
                if not display_all_nodes:
                    node_limit = st.slider(
                        "Nombre max. de n≈ìuds",
                        min_value=5,
                        max_value=50,
                        value=20
                    )
                else:
                    node_limit = len(st.session_state.transitions)
            
            # Obtenir le graphe
            graph = st.session_state.markov_chain.get_graph()
            
            # Limiter le nombre de n≈ìuds si demand√© et n√©cessaire
            if not display_all_nodes and len(graph.nodes()) > node_limit:
                st.info(f"Affichage limit√© √† {node_limit} n≈ìuds sur {len(graph.nodes())} au total.")
                nodes = list(graph.nodes())[:node_limit]
                graph = graph.subgraph(nodes)
            
            if vis_type == "Statique":
                # Cr√©er le graphique avec matplotlib
                fig, ax = plt.subplots(figsize=(10, 8))
                
                # Positions des n≈ìuds
                pos = nx.spring_layout(graph, seed=42)
                
                # Dessiner les n≈ìuds
                nx.draw_networkx_nodes(graph, pos, node_size=700, node_color='lightblue', alpha=0.8, ax=ax)
                
                # Dessiner les ar√™tes avec des fl√®ches
                edge_weights = [graph[u][v]['weight'] * 3 for u, v in graph.edges()]
                nx.draw_networkx_edges(graph, pos, width=edge_weights, alpha=0.7, 
                                      arrows=True, arrowsize=15, edge_color='gray', ax=ax)
                
                # Ajouter les √©tiquettes
                nx.draw_networkx_labels(graph, pos, font_size=10, ax=ax)
                
                # Ajouter les √©tiquettes des ar√™tes (probabilit√©s)
                edge_labels = {(u, v): f"{graph[u][v]['weight']:.2f}" for u, v in graph.edges()}
                nx.draw_networkx_edge_labels(graph, pos, edge_labels=edge_labels, font_size=8, ax=ax)
                
                # Configurer l'apparence
                plt.title("Graphe de transition")
                plt.axis('off')
                
                # Afficher le graphique
                st.pyplot(fig)
            else:
                # Visualisation interactive avec Pyvis
                net = Network(notebook=True, height="600px", width="100%", directed=True)
                
                # Ajouter les n≈ìuds
                for node in graph.nodes():
                    net.add_node(node, label=node, title=node)
                
                # Ajouter les ar√™tes avec des largeurs proportionnelles aux poids
                for u, v, data in graph.edges(data=True):
                    weight = data.get('weight', 0.5)
                    width = 1 + 5 * weight  # Largeur proportionnelle √† la probabilit√©
                    net.add_edge(u, v, value=weight, title=f"P: {weight:.2f}", width=width)
                
                # Configurer la physique du r√©seau
                net.toggle_physics(True)
                net.barnes_hut(gravity=-5000, central_gravity=0.3, spring_length=100)
                
                # Sauvegarder et afficher
                with tempfile.NamedTemporaryFile(delete=False, suffix='.html') as tmp:
                    net.save_graph(tmp.name)
                    components.html(open(tmp.name, 'r', encoding='utf-8').read(), height=600)
        
        # Sous-onglet 2: Matrice de transition
        with vis_tab2:
            st.subheader("Matrice de transition")
            
            # Obtenir la matrice de transition
            matrix, states = st.session_state.markov_chain.get_transition_matrix()
            
            # Cr√©er un DataFrame pour afficher la matrice
            df = pd.DataFrame(matrix, index=states, columns=states)
            
            # Afficher la matrice
            st.caption("Probabilit√©s de transition entre √©tats (ligne ‚Üí colonne)")
            st.dataframe(df)
            
            # Visualiser la matrice sous forme de heatmap
            fig, ax = plt.subplots(figsize=(10, 8))
            plt.title("Matrice de transition")
            
            # Cr√©er la heatmap
            im = ax.imshow(matrix, cmap='Blues')
            
            # Ajouter les annotations
            for i in range(len(states)):
                for j in range(len(states)):
                    if matrix[i, j] > 0:
                        text = ax.text(j, i, f"{matrix[i, j]:.2f}",
                                      ha="center", va="center", color="black" if matrix[i, j] < 0.5 else "white")
            
            # Ajouter les √©tiquettes des axes
            ax.set_xticks(np.arange(len(states)))
            ax.set_yticks(np.arange(len(states)))
            ax.set_xticklabels(states)
            ax.set_yticklabels(states)
            
            # Rotation des √©tiquettes de l'axe x pour une meilleure lisibilit√©
            plt.setp(ax.get_xticklabels(), rotation=45, ha="right", rotation_mode="anchor")
            
            # Ajouter une barre de couleur
            cbar = ax.figure.colorbar(im, ax=ax)
            cbar.ax.set_ylabel("Probabilit√©", rotation=-90, va="bottom")
            
            # Afficher la heatmap
            st.pyplot(fig)
    else:
        st.info("Veuillez d'abord configurer le mod√®le dans l'onglet Configuration.")

# Onglet 4: G√©n√©ration
with tab4:
    st.header("G√©n√©ration de texte")
    
    if st.session_state.transitions:
        # Options de g√©n√©ration
        col1, col2 = st.columns(2)
        
        with col1:
            # S√©lectionner l'√©tat initial
            initial_states = list(st.session_state.transitions.keys())
            initial_state = st.selectbox(
                "√âtat initial",
                ["Al√©atoire"] + initial_states
            )
            
            if initial_state == "Al√©atoire":
                initial_state = None
                
            st.caption("L'√©tat initial sera utilis√© pour toutes les phrases g√©n√©r√©es.")
        
        with col2:
            # Options de g√©n√©ration
            length = st.slider(
                "Nombre de mots",
                min_value=5,
                max_value=100,
                value=20
            )
            
            sentences = st.number_input(
                "Nombre de phrases",
                min_value=1,
                max_value=20,
                value=3,
                step=1
            )
        
        # Bouton pour g√©n√©rer le texte
        if st.button("G√©n√©rer"):
            try:
                # G√©n√©rer le texte
                generated_text = st.session_state.markov_chain.generate_text(
                    length=length,
                    start_state=initial_state,
                    num_sentences=sentences
                )
                
                # Afficher le texte g√©n√©r√©
                st.subheader("R√©sultat")
                
                # S√©parer les phrases pour un meilleur affichage
                if "\n" in generated_text:
                    for i, sentence in enumerate(generated_text.split("\n")):
                        st.text(f"Phrase {i+1}: {sentence}")
                else:
                    st.text(generated_text)
                
                # Ajouter √† l'historique des g√©n√©rations
                if 'generation_history' not in st.session_state:
                    st.session_state.generation_history = []
                
                st.session_state.generation_history.append({
                    "texte": generated_text,
                    "√©tat_initial": initial_state if initial_state else "Al√©atoire",
                    "longueur": length,
                    "phrases": sentences
                })
            except Exception as e:
                st.error(f"Erreur: {str(e)}")
        
        # Afficher l'historique des g√©n√©rations
        if 'generation_history' in st.session_state and st.session_state.generation_history:
            st.subheader("Historique")
            
            for i, gen in enumerate(reversed(st.session_state.generation_history[-5:])):  # R√©duire √† 5 derni√®res g√©n√©rations
                with st.expander(f"G√©n√©ration #{len(st.session_state.generation_history) - i}"):
                    st.write(f"**√âtat initial :** {gen['√©tat_initial']}")
                    st.write(f"**Longueur :** {gen['longueur']} mots")
                    st.write(f"**Phrases :** {gen['phrases']}")
                    
                    # Afficher le texte g√©n√©r√© avec des s√©parations claires entre les phrases
                    st.write("**Texte g√©n√©r√© :**")
                    if "\n" in gen['texte']:
                        for j, sentence in enumerate(gen['texte'].split("\n")):
                            st.text(f"Phrase {j+1}: {sentence}")
                    else:
                        st.text(gen['texte'])
    else:
        st.info("Veuillez d'abord configurer le mod√®le dans l'onglet Configuration.")

# Section d'aide en bas de page, plus concise
with st.expander("√Ä propos des cha√Ænes de Markov"):
    st.markdown("""
    **Cha√Æne de Markov:** Processus stochastique o√π l'√©tat futur ne d√©pend que de l'√©tat pr√©sent.
    
    **Application pour la g√©n√©ration de texte**:
    - **√âtats**: Chaque mot est un √©tat
    - **Transitions**: Probabilit√©s de passer d'un mot √† un autre
    - **Matrice**: Repr√©sentation des probabilit√©s de transition
    - **G√©n√©ration**: Parcours al√©atoire du graphe selon les probabilit√©s
    """)